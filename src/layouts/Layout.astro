---
import "./src/styles/global.css";
import Header from "../components/Header.astro";

export interface Props {
  title?: string;
  description?: string;
}

const {
  title = "Dev Wells",
  description = "Sometimes I just want to be weird, you know?",
} = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="description" content={description} />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="bg-ivory dark:bg-ivory-dark text-forest dark:text-forest-dark transition-colors">
    <Header />
    <div class="pt-[calc(var(--spacing-phi-3)*2+1rem)]">
      <slot />
    </div>
  </body>
</html>

<script is:inline>
  // This needs to run immediately to prevent flash
  const theme = (() => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme');
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark';
    }
    return 'light';
  })();

  if (theme === 'dark') {
    document.documentElement.classList.add('dark');
  } else {
    document.documentElement.classList.remove('dark');
  }
  
  window.localStorage.setItem('theme', theme);
</script>

<style is:global>
  html {
    font-family: var(--font-sans);
    font-size: 16px;
    line-height: 1.618;
  }

  body {
    margin: 0;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }

  * {
    box-sizing: border-box;
  }

  ::selection {
    background-color: var(--color-sage-200);
    color: var(--color-forest);
  }

  .dark ::selection {
    background-color: var(--color-sage-700);
    color: var(--color-forest-dark);
  }
</style>
