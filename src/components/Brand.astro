---

---

<a
  href="/"
  class="group flex items-center gap-phi-3 hover:opacity-80 transition-opacity"
  id="brand-section"
>
  <svg
    width="16"
    height="16"
    viewBox="0 0 24 24"
    class="text-sage-500 transition-colors group-hover:text-flower-400"
    id="brand-icon"
  >
    <path
      id="leaf-path"
      d="M17,8 C8,10 5.9,16.17 3.82,21.34 L5.71,22 L6.66,19.7 C7.14,19.87 7.64,20 8,20 C19,20 22,3 22,3 C21,5 14,5.25 9,6.25 C4,7.25 2,11.5 2,13.5 C2,15.5 3.75,17.25 3.75,17.25 C7,8 17,8 17,8 Z"
      fill="currentColor"></path>
    <g id="dots-group" opacity="0">
      <circle cx="6" cy="18" r="2" fill="currentColor"></circle>
      <circle cx="12" cy="18" r="2" fill="currentColor"></circle>
      <circle cx="18" cy="18" r="2" fill="currentColor"></circle>
    </g>
  </svg>
  <span class="text-sm font-mono text-bark-600 dark:text-bark-400">wlls</span>
</a>

<script>
  import { animate } from "animejs";

  const ANIMATION_TIMINGS = {
    leaf: {
      sway: 1500,
      fadeOut: 400,
      fadeIn: 400,
    },
    dots: {
      fadeIn: 300,
      staggerDelay: 100,
      displayDuration: 1000,
      fadeOut: 300,
    },
  } as const;

  console.log("Wells wells wells...");

  const elements = {
    leaf: document.getElementById("leaf-path"),
    dots: document.getElementById("dots-group"),
    brand: document.getElementById("brand-section"),
  };

  if (elements.leaf && elements.dots && elements.brand) {
    // Capture elements as constants after verification
    const leafPath = elements.leaf;
    const dotsGroup = elements.dots;
    const brandSection = elements.brand;

    let leafAnimation: ReturnType<typeof animate> | null = null;
    let isAnimating = false;

    function startLeafAnimation() {
      if (isAnimating) return;
      isAnimating = true;

      // Animate leaf falling/swaying
      leafAnimation = animate(leafPath, {
        rotate: [0, -5, 5, 0],
        scale: [1, 0.95, 1.05, 1],
        duration: ANIMATION_TIMINGS.leaf.sway,
        ease: "inOutSine",
        loop: true,
      });
    }

    function stopLeafAnimation() {
      leafAnimation?.pause();
      leafAnimation = null;
      isAnimating = false;

      // Fade out leaf, fade in dots
      animate(leafPath, {
        opacity: [1, 0],
        scale: [1, 0.8],
        duration: ANIMATION_TIMINGS.leaf.fadeOut,
        ease: "out(3)",
        onComplete: () => {
          // Show dots
          animate(dotsGroup, {
            opacity: [0, 1],
            scale: [0.5, 1],
            duration: ANIMATION_TIMINGS.dots.fadeIn,
            delay: (el, i) => i * ANIMATION_TIMINGS.dots.staggerDelay,
            ease: "spring(1, 80, 10)",
            onComplete: () => {
              // After dots settle, return to leaf
              setTimeout(() => {
                animate(dotsGroup, {
                  opacity: [1, 0],
                  scale: [1, 0.5],
                  duration: ANIMATION_TIMINGS.dots.fadeOut,
                  ease: "out(2)",
                  onComplete: () => {
                    // Restore leaf
                    animate(leafPath, {
                      opacity: [0, 1],
                      scale: [0.8, 1],
                      rotate: 0,
                      duration: ANIMATION_TIMINGS.leaf.fadeIn,
                      ease: "spring(1, 80, 10)",
                    });
                  },
                });
              }, ANIMATION_TIMINGS.dots.displayDuration);
            },
          });
        },
      });
    }

    brandSection.addEventListener("mouseenter", startLeafAnimation);
    brandSection.addEventListener("mouseleave", stopLeafAnimation);
  }
</script>
