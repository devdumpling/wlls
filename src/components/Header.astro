---
import Brand from "./Brand.astro";
import Navigation from "./Navigation.astro";
---

<header
  class="fixed top-0 left-0 right-0 z-10 will-change-[transform,backdrop-filter,background-color]"
  id="main-header"
>
  <div
    class="flex justify-between items-center px-phi-4 py-phi-3 bg-paper/80 dark:bg-paper-dark/80 backdrop-blur-sm"
    id="header-container"
  >
    <Brand />
    <Navigation />
  </div>
</header>

<script>
  import { animate } from "animejs";

  const SCROLL_CONFIG = {
    hideThreshold: 200,
    hideVelocity: 8,
    showVelocity: -8,
    showThreshold: 100,
  } as const;

  const SCROLL_ANIMATIONS = {
    hide: {
      header: {
        translateY: "-100%",
        duration: 350,
        ease: "out(3)",
      },
      links: {
        opacity: 0,
        translateY: "-10px",
        duration: 200,
        delay: (el: any, i: number) => i * 40,
        ease: "out(2)",
      },
    },
    show: {
      header: {
        translateY: "0%",
        duration: 300,
        ease: "spring(1, 100, 10)",
      },
      links: {
        opacity: 1,
        translateY: "0px",
        duration: 200,
        delay: (el: any, i: number) => i * 30,
        ease: "out(2)",
      },
    },
  };

  const header = document.getElementById("main-header");

  const test = () => {

  }

  if (header) {
    let lastScrollY = window.scrollY;
    let headerIsHidden = false;
    let headerIsAnimating = false;

    function hideHeader() {
      if (headerIsHidden || headerIsAnimating || !header) return;
      headerIsHidden = true;
      headerIsAnimating = true;

      animate(header, {
        ...SCROLL_ANIMATIONS.hide.header,
        onComplete: () => {
          headerIsAnimating = false;
        },
      });

      const navLinks = document.querySelectorAll(".nav-link");
      if (navLinks.length > 0) {
        animate(navLinks, SCROLL_ANIMATIONS.hide.links);
      }
    }

    function showHeader() {
      if (!headerIsHidden || headerIsAnimating || !header) return;
      headerIsHidden = false;
      headerIsAnimating = true;

      animate(header, {
        ...SCROLL_ANIMATIONS.show.header,
        onComplete: () => {
          headerIsAnimating = false;
        },
      });

      const navLinks = document.querySelectorAll(".nav-link");
      if (navLinks.length > 0) {
        animate(navLinks, SCROLL_ANIMATIONS.show.links);
      }
    }

    let ticking = false;
    function handleScroll() {
      const currentScrollY = window.scrollY;
      const scrollDelta = currentScrollY - lastScrollY;

      if (
        currentScrollY > SCROLL_CONFIG.hideThreshold &&
        scrollDelta > SCROLL_CONFIG.hideVelocity
      ) {
        hideHeader();
      } else if (
        scrollDelta < SCROLL_CONFIG.showVelocity ||
        currentScrollY <= SCROLL_CONFIG.showThreshold
      ) {
        showHeader();
      }

      lastScrollY = currentScrollY;
      ticking = false;
    }

    window.addEventListener(
      "scroll",
      () => {
        if (!ticking) {
          requestAnimationFrame(handleScroll);
          ticking = true;
        }
      },
      { passive: true },
    );
  }
</script>
